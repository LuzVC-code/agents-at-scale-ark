@startuml Agent Execution Flow - ARK Platform

title ARK Agent Execution - Detailed Flow

!define ARKCOLOR #1E88E5
!define SUCCESSCOLOR #4CAF50
!define ERRORCOLOR #F44336
!define PROCESSCOLOR #FF9800

actor "QueryController" as QC ARKCOLOR
participant "Agent" as Agent ARKCOLOR
participant "ExecutionEngineClient" as EEC ARKCOLOR
participant "ExternalEngine" as ExtEngine PROCESSCOLOR
participant "ToolRegistry" as TR ARKCOLOR
participant "Model" as Model ARKCOLOR
participant "LLMProvider" as LLM ARKCOLOR
participant "TokenCollector" as TC ARKCOLOR
participant "EventRecorder" as ER ARKCOLOR

== Agent Execution Initialization ==

QC -> Agent : Execute(ctx, userInput, history)
activate Agent
note right of Agent : Entry point for agent execution

Agent -> Agent : Validate model configuration
alt Model not configured
    Agent -> QC : Error: "agent has no model configured"
    note right of Agent : Early validation prevents execution
end

Agent -> TC : NewOperationTracker("AgentExecution", agentName)
activate TC
note right of TC : Track execution metrics and timing

== Execution Engine Selection ==

alt External Execution Engine
    Agent -> Agent : Check ExecutionEngine != nil
    
    alt A2A Execution Engine
        Agent -> Agent : executeWithA2AExecutionEngine(ctx, userInput)
        note right of Agent : Special reserved 'a2a' engine
        Agent -> Agent : NewA2AExecutionEngine(client, recorder)
        Agent -> Agent : Execute A2A-specific logic
        Agent -> QC : Response messages
        
    else Custom External Engine
        Agent -> Agent : executeWithExecutionEngine(ctx, userInput, history)
        
        Agent -> EEC : NewExecutionEngineClient(k8sClient)
        activate EEC
        note right of EEC : HTTP client with 5min timeout
        
        Agent -> Agent : buildAgentConfig(agent)
        note right of Agent : Extract agent configuration
        
        Agent -> Agent : resolvePrompt(ctx)
        note right of Agent : Resolve template parameters in prompt
        
        Agent -> TR : buildToolDefinitions(tools)
        activate TR
        TR -> Agent : Tool definitions for engine
        deactivate TR
        
        Agent -> EEC : Execute(ctx, engineRef, agentConfig, userInput, history, tools, recorder)
        
        EEC -> TC : NewOperationTracker("Executor", engineName)
        
        EEC -> EEC : resolveExecutionEngineAddress(ctx, engineRef, namespace)
        note right of EEC : Resolve service/ingress address
        
        EEC -> EEC : convertToExecutionEngineMessage(userInput)
        EEC -> EEC : convertToExecutionEngineMessage(history[])
        note right of EEC : Convert internal format to engine format
        
        EEC -> ExtEngine : POST /execute (HTTP request)
        activate ExtEngine
        note right of ExtEngine : LangChain, AutoGen, or custom engine
        
        ExtEngine -> ExtEngine : Process agent config and tools
        ExtEngine -> LLM : External engine LLM calls
        activate LLM
        LLM -> ExtEngine : LLM responses
        deactivate LLM
        
        ExtEngine -> EEC : ExecutionEngineResponse
        deactivate ExtEngine
        
        EEC -> EEC : convertFromExecutionEngineMessage(response.Messages)
        note right of EEC : Convert back to internal format
        
        EEC -> Agent : Response messages
        deactivate EEC
        
    end
    
else Built-in Local Execution (Default)
    Agent -> Agent : executeLocally(ctx, userInput, history)
    
    == Local Execution Flow ==
    
    Agent -> TR : ToOpenAITools()
    activate TR
    TR -> Agent : OpenAI tool definitions
    deactivate TR
    note right of TR : Convert ARK tools to OpenAI format
    
    Agent -> Agent : prepareMessages(ctx, userInput, history)
    note right of Agent : Combine system prompt + history + user input
    
    Agent -> Agent : resolvePrompt(ctx)
    note right of Agent : Template parameter resolution
    
    Agent -> Agent : Create final message array
    note right of Agent : [SystemMessage, ...History, UserMessage]
    
    == LLM Interaction Loop ==
    
    loop Tool Calling Loop
        Agent -> ER : NewOperationTracker("LLMCall", modelName)
        activate ER
        
        Agent -> Agent : executeModelCall(ctx, agentMessages, tools)
        
        Agent -> Model : Resolve model reference
        activate Model
        Model -> Agent : Model configuration (provider, API key, etc.)
        deactivate Model
        
        Agent -> LLM : ChatCompletion(ctx, messages, tools)
        activate LLM
        note right of LLM : OpenAI-compatible API call
        
        LLM -> Agent : ChatCompletion response
        deactivate LLM
        
        Agent -> TC : Record token usage
        TC -> ER : Emit token usage event
        
        Agent -> Agent : processAssistantMessage(choice)
        note right of Agent : Extract content and tool calls
        
        Agent -> Agent : Add assistant message to conversation
        
        alt Tool calls present
            Agent -> Agent : executeToolCalls(ctx, toolCalls, agentMessages, newMessages)
            
            loop For each tool call
                Agent -> Agent : executeToolCall(ctx, toolCall)
                
                Agent -> TR : ExecuteTool(ctx, toolCall)
                activate TR
                
                TR -> TR : Find tool executor by name
                
                alt HTTP Tool
                    TR -> TR : Create HTTP executor
                    TR -> TR : Make HTTP request to external API
                    note right of TR : RESTful API integration
                    
                else MCP Tool
                    TR -> TR : Create MCP executor
                    TR -> TR : Connect to MCP server
                    TR -> TR : Send MCP protocol message
                    note right of TR : Model Context Protocol
                    
                else Kubernetes Tool
                    TR -> TR : Use Kubernetes client
                    TR -> TR : Execute kubectl-like operations
                    note right of TR : Native K8s integration
                end
                
                TR -> Agent : Tool execution result
                deactivate TR
                
                Agent -> Agent : Create tool message with result
                Agent -> Agent : Add to conversation history
                
                Agent -> ER : Emit tool execution event
                deactivate ER
            end
            
            note right of Agent : Continue loop with tool results
            
        else No tool calls
            Agent -> Agent : Execution complete
            note right of Agent : Final response received
        end
    end
end

== Response Processing & Cleanup ==

Agent -> TC : Complete operation tracking
TC -> ER : Emit completion event
deactivate TC

Agent -> QC : Return response messages
deactivate Agent

== Error Handling ==

note over Agent, LLM : Error Handling Scenarios
note over Agent : - Model configuration errors
note over Agent : - LLM API failures and retries
note over Agent : - Tool execution failures
note over Agent : - Context cancellation handling
note over Agent : - Timeout management (5 min default)
note over Agent : - External engine connectivity issues
note over Agent : - Token limit exceeded scenarios

@enduml
