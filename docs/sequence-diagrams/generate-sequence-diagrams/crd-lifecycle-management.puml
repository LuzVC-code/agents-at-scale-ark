@startuml crd-lifecycle-management
!define ARKSTYLE
!include <awslib/AWSCommon>
!include <awslib/ApplicationIntegration/APIGateway>

' Define color scheme for ARK components
!define ARK_PRIMARY #2E86AB
!define ARK_SECONDARY #A23B72
!define ARK_ACCENT #F18F01
!define ARK_SUCCESS #C73E1D
!define ARK_NEUTRAL #F4F4F4

' Title and header information
title **CRD Lifecycle Management Flow**\n//ARK Platform v0.1.31 - Kubernetes-native CRD Operations//

' Define participants with proper styling
participant "Kubernetes\nAPI Server" as API ARK_PRIMARY
participant "Admission\nWebhook" as Webhook ARK_SECONDARY
participant "ARK\nController" as Controller ARK_ACCENT
participant "Event\nRecorder" as Events ARK_SUCCESS
participant "Finalizer\nHandler" as Finalizer ARK_NEUTRAL
participant "Status\nUpdater" as Status #lightblue

' Main lifecycle flow
note over API, Status
**Complete CRD Lifecycle with Validation, Controller Processing & Cleanup**
Supports: Query, Agent, Team, Model, Tool, Memory, ExecutionEngine CRDs
end note

== 1. CRD Creation & Admission Control ==
API -> Webhook : Admission Review Request
activate Webhook
note right of Webhook : Validating webhook for CRD type:\n- Agent: model refs, tools, parameters\n- Query: targets, selectors, consistency\n- Team: member refs, strategy configs\n- Model: provider configurations\n- Tool: MCP server validation

alt if validation passes
    Webhook -> Webhook : ValidateCreate(ctx, obj)
    note right of Webhook : Resource-specific validation:\n- Reference validation\n- Schema compliance\n- Business logic checks
    
    Webhook -> API : AdmissionResponse: Allowed=true
    note right of API : CRD creation approved
else validation fails
    Webhook -> API : AdmissionResponse: Allowed=false + errors
    note right of API : CRD creation rejected
    deactivate Webhook
    API -> API : Return error to client
    note over API : Process terminates here
end

deactivate Webhook

== 2. Controller Reconciliation Loop ==
API -> Controller : Watch notification (Create/Update/Delete)
activate Controller
note right of Controller : Manager watches all ARK CRDs:\nQuery, Agent, Team, Model, Tool, Memory, etc.

Controller -> API : Get(ctx, namespacedName, &obj)
activate API
API -> Controller : CRD object
deactivate API

== 3. Finalizer Management ==
Controller -> Controller : handleFinalizer(ctx, obj)
note right of Controller : Standard finalizer pattern for cleanup

alt if object not being deleted
    alt if finalizer not present
        Controller -> Controller : controllerutil.AddFinalizer(obj, finalizer)
        Controller -> API : Update(ctx, obj)
        note right of Controller : Add finalizer for cleanup protection
    end
else object being deleted
    Controller -> Finalizer : Execute cleanup logic
    activate Finalizer
    
    alt if Query CRD
        Finalizer -> Finalizer : cleanupExistingOperation()
        note right of Finalizer : Cancel running operations\nCleanup go routines
    else if Memory/ExecutionEngine CRD
        Finalizer -> Finalizer : cleanup connections
        note right of Finalizer : Close database connections\nCleanup external resources
    else if other CRDs
        Finalizer -> Finalizer : resource-specific cleanup
    end
    
    Finalizer -> Controller : Cleanup complete
    deactivate Finalizer
    
    Controller -> Controller : controllerutil.RemoveFinalizer(obj, finalizer)
    Controller -> API : Update(ctx, obj)
    note right of Controller : Remove finalizer to allow deletion
end

== 4. Resource Processing State Machine ==
Controller -> Controller : Determine processing based on CRD type

alt if Query CRD
    Controller -> Controller : handleQueryExecution(ctx, req, obj)
    note right of Controller : State machine: Running → Done/Error\nHandle TTL expiration\nManage concurrent operations
    
    Controller -> Events : Record execution events
    activate Events
    Events -> API : Create Event objects
    deactivate Events
    
    Controller -> Status : updateStatus(ctx, obj, statusRunning)
    activate Status
    Status -> API : Update status subresource
    deactivate Status

else if Memory CRD
    Controller -> Controller : processMemory(ctx, memory)
    note right of Controller : State machine: Running → Ready/Error\nResolve address from ValueSource\nValidate connectivity
    
    Controller -> API : Get secrets/configmaps for ValueSource
    API -> Controller : Resolved values
    
    Controller -> Status : updateStatus(ctx, memory, statusReady)
    activate Status
    Status -> API : Update status.lastResolvedAddress
    deactivate Status

else if ExecutionEngine CRD
    Controller -> Controller : processExecutionEngine(ctx, engine)
    note right of Controller : State machine: Running → Ready/Error\nResolve service address\nValidate engine availability
    
    Controller -> Status : updateStatus(ctx, engine, statusReady)
    activate Status
    Status -> API : Update status.lastResolvedAddress
    deactivate Status

else if Agent/Team/Model/Tool CRD
    Controller -> Controller : validateReferences(ctx, obj)
    note right of Controller : Validate cross-references:\n- Agent → Model refs\n- Team → Agent refs\n- Tool → MCP server refs
    
    alt if references valid
        Controller -> Status : updateStatus(ctx, obj, statusReady)
        activate Status
        Status -> API : Update status phase
        deactivate Status
    else references invalid
        Controller -> Status : updateStatus(ctx, obj, statusError)
        activate Status
        Status -> API : Update with error details
        deactivate Status
    end
end

== 5. Event Recording & Observability ==
Controller -> Events : Record lifecycle events
activate Events

Events -> API : Event: "Normal", "Created", "CRD created successfully"
Events -> API : Event: "Normal", "Ready", "CRD processing complete"

alt if errors occur
    Events -> API : Event: "Warning", "ValidationFailed", error details
    Events -> API : Event: "Warning", "ProcessingFailed", error details
end

deactivate Events

== 6. Update Reconciliation ==
note over API, Status : **On CRD Updates**

API -> Webhook : Admission Review (Update operation)
activate Webhook
Webhook -> Webhook : ValidateUpdate(ctx, oldObj, newObj)
note right of Webhook : Compare old vs new configuration\nValidate update compatibility

Webhook -> API : AdmissionResponse
deactivate Webhook

API -> Controller : Watch notification (Update)
Controller -> Controller : Handle spec changes
note right of Controller : Detect specification changes\nReprocess if necessary\nUpdate status accordingly

== 7. Cleanup & Deletion ==
note over API, Status : **On CRD Deletion**

API -> Controller : Watch notification (Delete)
Controller -> Controller : Process deletion timestamp
note right of Controller : Execute finalizer cleanup logic

Controller -> Finalizer : finalize(ctx, obj)
activate Finalizer

Finalizer -> Finalizer : Resource-specific cleanup
note right of Finalizer : Cancel operations\nClose connections\nCleanup external resources

Finalizer -> Events : Record cleanup events
Finalizer -> Controller : Cleanup complete
deactivate Finalizer

Controller -> API : Remove finalizer
API -> API : Delete CRD object
note right of API : Object fully deleted from etcd

deactivate Controller

note over API, Status
**Key Features:**
• Admission webhook validation for all CRD types
• Finalizer-based cleanup protection
• State machine-driven processing
• Cross-reference validation
• Event recording for observability
• Status subresource management
• TTL-based expiration (Query CRDs)
end note

@enduml
